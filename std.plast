// variable
variable = arg:string
  `$this = $arg` string string

variable = arg:int
  `$this = $arg` int int

variable = arg:float
  `$this = $arg` float float

variable = *
  `$this = $arg` * *

bool $block
  `if ($this) {$block} $`

undefined else
  `else {$block}`
  block
    `else {$block}`

undefined return *
  `return $arg`

undefined print
  "undefined" print

// string
string print
  `printf("%s\n", $this)` int

string = arg:string
  `$this = $arg` string

string += arg:string
  `$this = sdscatsds($this, $arg)` string

string += arg:int
  `$this = sdscatsds($this, sdsfromlonglong((long long)$arg))` string

string + arg:string
  `sdscatsds($this, $arg)` string

string + arg:int
  `sdscatsds($this, sdsfromlonglong((long long)$arg))` string

string + arg:float
  `sdscatsds($this, _strFromFloat($arg))` string

string getType
  `"string"` string

string == arg:string
  `(strcmp($this, $arg) == 0)` bool

string != arg:string
  `(strcmp($this, $arg) != 0)` bool

string tok arg:string
  `_strTok($this, $arg)` array:string

string trim arg:string
  `sdstrim($this, $arg)`

string each arg:variable
  `for (int i = 0; i < sdslen($this); i++){$arg = sdsnewlen(&$this[i], 1); $block}` undefined string

string getLeftShift
  `_strLeftShift($this, ' ')` int

// int
int print
  `printf("%d\n", $this)` int

int = arg:int
  `$this = $arg` int

int += arg:int
  `$this += $arg` int

int -= arg:int
  `$this -= $arg` int

int *= arg:int
  `$this *= $arg` int

int > arg:int
  `($this > $arg)` bool

int < arg:int
  `($this < $arg)` bool

int == arg:int
  `($this == $arg)` bool

int != arg:int
  `($this != $arg)` bool

int >: arg:int
  `while ($this > $arg) {$block}` bool

int <: arg:int
  `while ($this < $arg) {$block}` bool

int > arg:float
  `(float) $this > $arg` bool

int < arg:float
  `(float) $this > $arg` bool

int >: arg:float
  `while ((float) $this > $arg) {$block}` bool

int <: arg:float
  `while ((float) $this < $arg) {$block}` bool

int + arg:string
  `sdscatsds(sdsfromlonglong((long long)$this), $arg)` string

int + arg:int
  `($this + $arg)` int

int ++
  `$this += 1` int

int --
  `$this -= 1` int

int + arg:float
  `((float) $this + $arg)` float

int - arg:int
  `($this - $arg)` int

int - arg:float
  `((float) $this - $arg)` float

int * arg:int
  `($this * $arg)` int

int / arg:int
  `((float) $this / (float) $arg)` float

int / arg:float
  `((float) $this / $arg)` float

int ^ arg:int
  `($this ^ $arg)` int

int & arg:int
  `($this & $arg)` int

int | arg:int
  `($this | $arg)` int

int >> arg:int
  `($this >> $arg)` int

int << arg:int
  `($this << $arg)` int

int pow arg:int
  `(int)pow($this, $arg)` int

int pow arg:float
  `(float)pow($this, $arg)` float

int getType
  `"int"` string

int % arg:int
  `($this % $arg)` int

// float
float print
  `printf("%g\n", $this)` int

float = arg:float
  `$this = $arg` float

float += arg:float
  `$this += $arg` float

float -= arg:float
  `$this -= $arg` float

float *= arg:float
  `$this *= $arg` float

float /= arg:float
  `$this /= $arg` float

float /= arg:int
  `$this /= (float) $arg` float

float == arg:int
  `($this == (float) $arg)` bool

float + arg:float
  `($this + $arg)` float

float + arg:int
  `($this + (float) $arg)` float

float - arg:float
  `($this - $arg)` float

float - arg:int
  `($this - (float) $arg)` float

float + arg:string
  `sdscatsds(_strFromFloat($this), $arg)` string

float * arg:int
  `($this * (float) $arg)` float

float * arg:float
  `($this * $arg)` float

float / arg:float
  `($this / (float)$arg)` float

float / arg:int
  `($this / $arg)` float

float pow arg:int
  `(float)pow($this, $arg)` float

float pow arg:float
  `(float)pow($this, $arg)` float

float getType
  `"float"` string

// bool
bool && arg:bool
  `($this && $arg)` bool

bool || arg:bool
  `($this || $arg)` bool

bool ? tuple
  `$ternarOp(&$this, *$arg)`

bool == arg:bool
  `($this == $arg)` bool

// tuples
* , *
  `$this, $arg` tuple

tuple print
  `$structPrint(&$this)` int

struct print
  `$structPrint(&$this)` int

tuple = tuple
  `$structEq($thisLinked, &*$arg)` tuple

tuple = struct
  `$structEq($thisLinked, $arg)` tuple

tuple == tuple
  `$structEqCheck(&$this, &$arg)` bool

tuple != tuple
  `$structNotEqCheck(&$this, &$arg)` bool

tuple > tuple
  `$structMoreCheck(&$this, &$arg)` bool

tuple >= tuple
  `$structMoreEqCheck(&$this, &$arg)` bool

tuple < tuple
  `$structLessCheck(&$this, &$arg)` bool

tuple <= tuple
  `$structLessEqCheck(&$this, &$arg)` bool

tuple array
  `$structToArray(*$this)`


variable [] type
  `$this = $arrayInit()` array:$type array

array push *
  `kv_push($thisSubType, $this, $arg)`

array each variable
  `{$thisType x = $this; int kvs = kv_size(x); for(int i = 0; i < kvs; i++) {$arg = kv_a($thisSubType, x, i); $block}}` undefined $thisSubType

array print
  out = ""
  this each item
    out == ""
      out += item
    else
      out += ", " + item
  "["+out+"]" print

array len
  `(int) kv_size($this)` int

array = arg:array
  `$this = $arg` array

undefined array
  `$arrayInit()` array

tuple getType
  `"tuple"` string

// structs

variable = tuple
  `$this = (typeof($this)){$arg}` struct struct

variable = struct
  `$this = (typeof($this)){$arg}` struct struct

struct . *
  `$this.$argName` *

variable . *
  `$this.$argName` *

struct getType
  `"struct"` string

// superstructs
* : *
  `.$thisName = $arg` struct

// array_int

variable = array
  `$this = $arg` array:$argSubType array

array pop
  `kv_pop(*&$this)` $thisSubType

// files
string readFileSync
  `_strFromFile($this)` string
